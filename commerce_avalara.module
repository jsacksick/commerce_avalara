<?php

/**
 * @file
 * AvaTax service integration from Avalara, Inc.
 */

define('COMMERCE_AVALARA_PRODUCTION_MODE', 'prod');
define('COMMERCE_AVALARA_DEVELOPMENT_MODE', 'dev');
// Defines constants for the credentials field names.
define('COMMERCE_AVALARA_VAR_PREFIX', 'commerce_avalara_');
define('COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD', 'account_number');
define('COMMERCE_AVALARA_LICENSE_KEY_FIELD', 'license_key');
define('COMMERCE_AVALARA_COMPANY_CODE_FIELD', 'company_code');


/**
 * Implements hook_permission().
 */
function commerce_avalara_permission() {
  return array(
    'administer avalara' => array(
      'title' => t('Administer Avalara'),
      'description' => t('Manage settings for the Avalara Sales Tax'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_avalara_menu() {
  $items['admin/commerce/config/avalara'] = array(
    'title' => 'Avalara ',
    'description' => 'Avalara Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_avalara_credentials_settings_form'),
    'file' => 'includes/commerce_avalara.admin.inc',
    'access arguments' => array('administer avalara'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/avalara/credentials'] = array(
    'title' => 'Credentials',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access arguments' => array('administer avalara'),
    'weight' => -10,
  );
  $items['admin/commerce/config/avalara/shipping-settings'] = array(
    'title' => 'Shipping settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_shipping_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -1,
  );
  $items['admin/commerce/config/avalara/address-validation'] = array(
    'title' => 'Address validation',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'commerce_avalara_address_validation_access',
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_address_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/config/avalara/general-settings'] = array(
    'title' => 'General settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_general_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Access callback for the address validation tab.
 */
function commerce_avalara_address_validation_access($permission) {
  return module_exists('commerce_shipping') && user_access($permission);
}

/**
 * Returns the API mode.
 */
function commerce_avalara_api_mode() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'api_mode', COMMERCE_AVALARA_DEVELOPMENT_MODE);
}

/**
 * Returns the site-wide Avalara account number for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the account number is requested.
 */
function commerce_avalara_account_number($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . $api_mode . '_' . COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD, '');
}

/**
 * Returns the site-wide Avalara company code for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the company code is requested.
 */
function commerce_avalara_company_code($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . $api_mode . '_' . COMMERCE_AVALARA_COMPANY_CODE_FIELD, '');
}

/**
 * Returns the site-wide Avalara license key for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the license key is requested.
 */
function commerce_avalara_license_key($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . $api_mode . '_' . COMMERCE_AVALARA_LICENSE_KEY_FIELD, '');
}

/**
 * Returns a statically cached instance of an Avatax object.
 *
 * @param string $account_number
 *   The Avalara account number that is used to authenticate against the API.
 * @param string $license_key
 *   The Avalara license key that is used to authenticate against the API.
 * @param string $api_mode
 *
 * @return Avatax|bool.
 *   The constructed Avatax object or FALSE if the library could not be loaded..
 */
function commerce_avalara_object($account_number = '', $license_key = '', $api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  $avalara = &drupal_static(__FUNCTION__);

  // If the account number or the license key weren't provided,
  if (empty($account_number) || empty($license_key)) {
    $account_number = commerce_avalara_account_number($api_mode);
    $license_key = commerce_avalara_license_key($api_mode);
  }

  // If the account number or license key is still empty, return FALSE.
  if (empty($account_number) || empty($license_key)) {
    return FALSE;
  }

  if (!isset($avalara)) {
    $avalara[$api_mode] = new Avatax($account_number, $license_key, $api_mode);
  }

  return $avalara[$api_mode];
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_avalara_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['avalara_sales_tax'] = array(
    'name' => t('Sales tax'),
    'description' => t('Calculate AvaTax'),
    'add_form_submit_value' => t('Add Sales tax'),
    'base' => 'commerce_avalara_line_item',
    'callbacks' => array(
      'configuration' => 'commerce_avalara_configure_line_item',
    ),
  );

  return $line_item_types;
}

/**
 * Line item callback: configures the AvaTax line item type on module enable.
 */
function commerce_avalara_configure_line_item() {
  $field_name = 'avatax';
  $type = 'avatax';

  $field = field_info_field($field_name);
  $instance = field_info_instance('commerce_line_item', $field_name, $type);

  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => 'list_text',
      'cardinality' => 1,
      'entity_types' => array('commerce_line_item'),
      'translatable' => FALSE,
      'locked' => TRUE,
    );
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => 'commerce_line_item',
      'bundle' => $type,
      'label' => t('AvaTax'),
      'required' => TRUE,
      'settings' => array(),
      'widget' => array(
        'type' => 'options_select',
        'weight' => 0,
      ),
      'display' => array(
        'display' => array(
          'label' => 'hidden',
          'weight' => 0,
        ),
      ),
    );
    field_create_instance($instance);
  }
}

/**
 * Returns the title of an AvaTax line item.
 */
function commerce_avalara_line_item_title($line_item) {
  if (!empty($line_item->data['avatax']['display_title'])) {
    return $line_item->data['avatax']['display_title'];
  }
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_avalara_commerce_price_component_type_info() {
  $components = array();

  // Define a generic AvaTax price component type.
  $components['avalara_sales_tax'] = array(
    'title' => t('AvaTax sales tax'),
    'display_title' => variable_get('commerce_avalara_price_component_title', t('Sales tax')),
    'weight' => 25,
  );

  return $components;
}

/**
 * Calculate sales tax for a given order.
 */
function commerce_avalara_calculate_sales_tax($order) {
  // Skip tax calculation if the option is disabled
  if (!variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'tax_calculation_enabled', TRUE)) {
    return;
  }
}

/**
 * Deletes Avalara Sales Tax line items of an order.
 *
 * @param object $order
 *   The order object to delete the line items from.
 */
function commerce_avalara_delete_sales_tax_line_items($order) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // When deleting more than one line item, metadata_wrapper will give problems
  // if deleting while looping through the line items. So first remove from
  // order and then delete the line items.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is an avatax line item...
    if ($line_item_wrapper->type->value() == 'avalara_sales_tax') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any AvaTax line items.
  if (!empty($line_item_ids)) {
    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }
}
