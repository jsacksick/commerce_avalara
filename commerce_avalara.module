<?php

/**
 * @file
 * AvaTax service integration from Avalara, Inc.
 */

define('COMMERCE_AVALARA_PRODUCTION_MODE', 'prod');
define('COMMERCE_AVALARA_DEVELOPMENT_MODE', 'dev');
// Defines constants for the credentials field names.
define('COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD', 'account_number');
define('COMMERCE_AVALARA_LICENSE_KEY_FIELD', 'license_key');
define('COMMERCE_AVALARA_COMPANY_CODE_FIELD', 'company_code');


/**
 * Implements hook_permission().
 */
function commerce_avalara_permission() {
  return array(
    'administer avalara' => array(
      'title' => t('Administer Avalara'),
      'description' => t('Manage settings for the Avalara Sales Tax'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_avalara_menu() {
  $items['admin/commerce/config/avalara'] = array(
    'title' => 'Avalara ',
    'description' => 'Avalara Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_avalara_credentials_settings_form'),
    'file' => 'includes/commerce_avalara.admin.inc',
    'access arguments' => array('administer avalara'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/avalara/credentials'] = array(
    'title' => 'Credentials',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access arguments' => array('administer avalara'),
    'weight' => -10,
  );
  $items['admin/commerce/config/avalara/address-validation'] = array(
    'title' => 'Address validation',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'commerce_avalara_address_validation_access',
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_address_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/config/avalara/general-settings'] = array(
    'title' => 'General settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_general_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Access callback for the address validation tab.
 */
function commerce_avalara_address_validation_access($permission) {
  return module_exists('commerce_shipping') && user_access($permission);
}

/**
 * Returns the API mode.
 */
function commerce_avalara_api_mode() {
  return variable_get('commerce_avalara_api_mode', COMMERCE_AVALARA_DEVELOPMENT_MODE);
}

/**
 * Returns the site-wide Avalara account number for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the account number is requested.
 */
function commerce_avalara_account_number($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get('commerce_avalara_' . $api_mode . '_' . COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD, '');
}

/**
 * Returns the site-wide Avalara company code for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the company code is requested.
 */
function commerce_avalara_company_code($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get('commerce_avalara_' . $api_mode . '_' . COMMERCE_AVALARA_COMPANY_CODE_FIELD, '');
}

/**
 * Returns the site-wide Avalara license key for a given API mode.
 *
 * @param string $api_mode
 *  For which API mode (dev|prod) the license key is requested.
 */
function commerce_avalara_license_key($api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  return variable_get('commerce_avalara_' . $api_mode . '_' . COMMERCE_AVALARA_LICENSE_KEY_FIELD, '');
}

/**
 * Returns a statically cached instance of an Avatax object.
 *
 * @param string $account_number
 *   The Avalara account number that is used to authenticate against the API.
 * @param string $license_key
 *   The Avalara license key that is used to authenticate against the API.
 * @param string $api_mode
 *
 * @return Avatax|bool.
 *   The constructed Avatax object or FALSE if the library could not be loaded..
 */
function commerce_avalara_object($account_number = '', $license_key = '', $api_mode = COMMERCE_AVALARA_DEVELOPMENT_MODE) {
  $avalara = &drupal_static(__FUNCTION__);

  // If the account number or the license key weren't provided,
  if (empty($account_number) || empty($license_key)) {
    $account_number = commerce_avalara_account_number($api_mode);
    $license_key = commerce_avalara_license_key($api_mode);
  }

  // If the account number or license key is still empty, return FALSE.
  if (empty($account_number) || empty($license_key)) {
    return FALSE;
  }

  if (!isset($avalara)) {
    $avalara[$api_mode] = new Avatax($account_number, $license_key, $api_mode);
  }

  return $avalara[$api_mode];
}
