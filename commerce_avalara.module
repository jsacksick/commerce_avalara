<?php

/**
 * @file
 * AvaTax service integration from Avalara, Inc.
 */

define('COMMERCE_AVALARA_PRODUCTION_MODE', 'prod');
define('COMMERCE_AVALARA_DEVELOPMENT_MODE', 'dev');
define('COMMERCE_AVALARA_BASIC_VERSION', 'basic');
define('COMMERCE_AVALARA_PRO_VERSION', 'pro');
// Defines constants for the credentials field names.
define('COMMERCE_AVALARA_VAR_PREFIX', 'commerce_avalara_');
define('COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD', 'account_number');
define('COMMERCE_AVALARA_LICENSE_KEY_FIELD', 'license_key');
define('COMMERCE_AVALARA_COMPANY_CODE_FIELD', 'company_code');


/**
 * Implements hook_permission().
 */
function commerce_avalara_permission() {
  return array(
    'administer avalara' => array(
      'title' => t('Administer Avalara'),
      'description' => t('Manage settings for the Avalara Sales Tax'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_avalara_menu() {
  $items['admin/commerce/config/avalara'] = array(
    'title' => 'Avalara ',
    'description' => 'Avalara Configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_avalara_credentials_settings_form'),
    'file' => 'includes/commerce_avalara.admin.inc',
    'access arguments' => array('administer avalara'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/commerce/config/avalara/credentials'] = array(
    'title' => 'Credentials',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'access arguments' => array('administer avalara'),
    'weight' => -10,
  );
  $items['admin/commerce/config/avalara/shipping-settings'] = array(
    'title' => 'Shipping settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_shipping_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'weight' => -1,
  );
  $items['admin/commerce/config/avalara/address-validation'] = array(
    'title' => 'Address validation',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'commerce_avalara_address_validation_access',
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_address_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );
  $items['admin/commerce/config/avalara/general-settings'] = array(
    'title' => 'General settings',
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('administer avalara'),
    'page arguments' => array('commerce_avalara_general_settings_form'),
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
  );

  return $items;
}

/**
 * Access callback for the address validation tab.
 */
function commerce_avalara_address_validation_access($permission) {
  return module_exists('commerce_shipping') && user_access($permission);
}

/**
 * Returns the API mode.
 */
function commerce_avalara_api_mode() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'api_mode', COMMERCE_AVALARA_DEVELOPMENT_MODE);
}

/**
 * Returns the Avalara Product version (Basic|Pro).
 */
function commerce_avalara_product_version() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'product_version', COMMERCE_AVALARA_BASIC_VERSION);
}

/**
 * Returns the site-wide Avalara account number.
 */
function commerce_avalara_account_number() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . commerce_avalara_api_mode() . '_' . COMMERCE_AVALARA_ACCOUNT_NUMBER_FIELD, '');
}

/**
 * Returns the site-wide Avalara company code for a given API mode.
 */
function commerce_avalara_company_code() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . commerce_avalara_api_mode() . '_' . COMMERCE_AVALARA_COMPANY_CODE_FIELD, '');
}

/**
 * Returns the site-wide Avalara license key.
 */
function commerce_avalara_license_key() {
  return variable_get(COMMERCE_AVALARA_VAR_PREFIX . commerce_avalara_api_mode() . '_' . COMMERCE_AVALARA_LICENSE_KEY_FIELD, '');
}

/**
 * Returns a statically cached instance of an Avatax object.
 *
 * @param string $account_number
 *   The Avalara account number that is used to authenticate against the API.
 * @param string $license_key
 *   The Avalara license key that is used to authenticate against the API.
 *
 * @return Avatax|bool.
 *   The constructed Avatax object or FALSE if the library could not be loaded..
 */
function commerce_avalara_object($account_number = '', $license_key = '') {
  $avalara = &drupal_static(__FUNCTION__);

  // If the account number or the license key weren't provided,
  if (empty($account_number) || empty($license_key)) {
    $account_number = commerce_avalara_account_number();
    $license_key = commerce_avalara_license_key();
  }

  // If the account number or license key is still empty, return FALSE.
  if (empty($account_number) || empty($license_key)) {
    return FALSE;
  }

  // Retrieve the configured API mode (dev|prod).
  $api_mode = commerce_avalara_api_mode();

  if (!isset($avalara)) {
    $logger = NULL;

    // Specify the logger if the logging was enabled.
    if (variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'enable_logging', FALSE)) {
      $logger = 'watchdog';
    }

    $avalara[$api_mode] = new Avatax($account_number, $license_key, $api_mode, $logger);
  }

  return $avalara[$api_mode];
}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_avalara_commerce_line_item_type_info() {
  $line_item_types = array();

  $line_item_types['avalara_sales_tax'] = array(
    'name' => t('Sales tax'),
    'description' => t('Calculate AvaTax'),
    'add_form_submit_value' => t('Add Sales tax'),
    'base' => 'commerce_avalara_line_item',
  );

  return $line_item_types;
}

/**
 * Implements hook_commerce_price_component_type_info().
 */
function commerce_avalara_commerce_price_component_type_info() {
  $components = array();

  // Define a generic AvaTax price component type.
  $components['avalara_sales_tax'] = array(
    'title' => t('AvaTax sales tax'),
    'display_title' => variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'price_component_title', t('Sales tax')),
    'weight' => 25,
  );

  return $components;
}

/**
 * Returns the title of an AvaTax line item.
 */
function commerce_avalara_line_item_title($line_item) {
  if (!empty($line_item->data['commerce_avalara']['display_title'])) {
    return $line_item->data['commerce_avalara']['display_title'];
  }
  return t('Sales Tax');
}

/**
 * Implements hook_field_widget_form_alter().
 */
function commerce_avalara_field_widget_form_alter(&$element, &$form_state, $context) {
  if ($context['instance']['widget']['type'] == 'commerce_line_item_manager') {
    foreach ($element['line_items'] as $line_item_id => $line_item) {
      if ($line_item['line_item']['#value']->type == 'avalara_sales_tax') {
        $element['line_items'][$line_item_id]['commerce_unit_price']['#access'] = FALSE;
        $element['line_items'][$line_item_id]['quantity']['#access'] = FALSE;
      }
    }
  }
}

/**
 * Creates a new Sales tax line item populated with the proper values.
 *
 * @param array $tax_price
 *   A price array used to initialize the value of the line item's unit price.
 * @param int $order_id
 *   The ID of the order the line item belongs to.
 * @param array $data
 *   An array value to initialize the line item's data array with.
 *
 * @return
 *   The shipping line item for the specified service initialized to the given
 *   unit price.
 */
function commerce_avalara_line_item_new($tax_price, $order_id = 0, $data = array()) {
  // Create the new line item.
  $line_item = entity_create('commerce_line_item', array(
    'type' => 'avalara_sales_tax',
    'order_id' => $order_id,
    'quantity' => 1,
    'line_item_label' => t('Sales Tax'),
    'data' => $data,
  ));

  // Set the unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
  $line_item_wrapper->commerce_unit_price->amount = $tax_price['amount'];
  $line_item_wrapper->commerce_unit_price->currency_code = $tax_price['currency_code'];

  // Reset the data array of the line item total field to only include a
  // base price component, set the currency code from the order.
  $base_price = array(
    'amount' => 0,
    'currency_code' => $tax_price['currency_code'],
    'data' => array(),
  );

  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($base_price, 'base_price', $base_price, TRUE);
  $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add($line_item_wrapper->commerce_unit_price->value(), 'avalara_sales_tax', $tax_price, FALSE);

  // Return the line item.
  return $line_item;
}

/**
 * Calculate sales tax for a given order.
 */
function commerce_avalara_calculate_sales_tax($order) {
  $company_code = commerce_avalara_company_code();
  // Skip tax calculation if the option is disabled, or if the company code
  // is empty.
  if (!variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'tax_calculation_enabled', TRUE) || empty($company_code)) {
    return;
  }
  $customer_profile_to_use = variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'commerce_avalara_tax_address', FALSE);

  // Retrieve the destination customer profile type to use for calculating the
  // Sales Tax.
  if (!$customer_profile_to_use) {
    $customer_profile_to_use = module_exists('commerce_shipping') ? 'shipping' : 'billing';
  }

  // Checks if the Sales Tax needs to be calculated for this address.
  if (!commerce_avalara_check_address($order, 'commerce_customer_' . $customer_profile_to_use)) {
    return;
  }
  module_load_include('inc', 'commerce_avalara', 'includes/commerce_avalara.calc');
  $request = commerce_avalara_create_transaction($order);

  // Parse the result request.
  if ($request['success'] && isset($request['result'][0])) {
    $result = $request['result'][0];
    $tax_price = array(
      'amount' => commerce_currency_decimal_to_amount($result['totalTax'], $result['currencyCode']),
      'currency_code' => $result['currencyCode'],
      'data' => array(),
    );
    $data['commerce_avalara']['transaction_id'] = $result['id'];
    $data['commerce_avalara']['transaction_code'] = $result['code'];
    // Create a new Sales tax line item with the calculated rate.
    $line_item = commerce_avalara_line_item_new($tax_price, $order->order_id, $data);
    $order->data['commerce_avalara'] = $data['commerce_avalara'];
    commerce_avalara_add_sales_tax_line_item($line_item, $order);
  }
}

/**
 * Adds an AvaTax line item to an order, and saves the order.
 *
 * @param object $line_item
 *   An unsaved avatax line item that should be added to the order.
 * @param object $order
 *   The order to add the avatax line item to.
 */
function commerce_avalara_add_sales_tax_line_item($line_item, $order) {
  // Delete any existing AvaTax line items from the order.
  commerce_avalara_delete_sales_tax_line_items($order, TRUE);

  // Save the incoming line item now so we get its ID.
  commerce_line_item_save($line_item);

  // Add it to the order's line item reference value.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;

  commerce_order_calculate_total($order);
}

/**
 * Checks if the Avatax service needs to be called for this address.
 */
function commerce_avalara_check_address($order, $customer_profile_field) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  if (isset($order_wrapper->{$customer_profile_field}) && isset($order_wrapper->{$customer_profile_field}->commerce_customer_address)) {
    $customer_address = $order_wrapper->{$customer_profile_field}->commerce_customer_address->value();

    // Don't calculate Sales Tax if the provided address is not in the US
    // or Canada.
    if (!in_array($customer_address['country'], array('US', 'CA'))) {
      return FALSE;
    }

    $avatax_states = variable_get(COMMERCE_AVALARA_VAR_PREFIX . 'select_states', array());

    // Exit if not a valid AvaTax state.
    if (!empty($avatax_states) && !in_array($customer_address['administrative_area'], $avatax_states)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Deletes Avalara Sales Tax line items of an order.
 *
 * @param object $order
 *   The order object to delete the line items from.
 * @param $skip_save
 *   Boolean indicating whether or not to skip saving the order in this function.
 */
function commerce_avalara_delete_sales_tax_line_items($order, $skip_save = FALSE) {
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // When deleting more than one line item, metadata_wrapper will give problems
  // if deleting while looping through the line items. So first remove from
  // order and then delete the line items.
  $line_item_ids = array();

  foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    // If this line item is a Sales tax line item...
    if ($line_item_wrapper->type->value() == 'avalara_sales_tax') {
      // Store its ID for later deletion and remove the reference from the line
      // item reference field.
      $line_item_ids[] = $line_item_wrapper->line_item_id->value();
      $order_wrapper->commerce_line_items->offsetUnset($delta);
    }
  }

  // If we found any Sales Tax? line items.
  if (!empty($line_item_ids)) {
    // First save the order to update the line item reference field value.
    if (!$skip_save) {
      commerce_order_save($order);
    }

    // Then delete the line items.
    commerce_line_item_delete_multiple($line_item_ids);
  }
}

/**
 * Generate AvaTax user name as approximation of e-mail address.
 */
function commerce_avalara_email_to_username($user_email) {
  // Default to the first part of the e-mail address.
  $name = substr($user_email, 0, strpos($user_email, '@'));

  // Remove possible illegal characters.
  $name = preg_replace('/[^A-Za-z0-9_.-]/', '', $name);

  // Trim that value for spaces and length.
  $name = trim(substr($name, 0, USERNAME_MAX_LENGTH - 4));

  return $name;
}

/**
 * Implements hook_commerce_payment_order_paid_in_full().
 *
 * Commit transaction when an order is paid in full.
 */
function commerce_avalara_commerce_payment_order_paid_in_full($order) {
  commerce_avalara_commit_transaction($order);
}

/**
 * COMMIT AvaTax transaction for a given $order.
 */
function commerce_avalara_commit_transaction($order) {
  if (isset($order->data['commerce_avalara']['transaction_code']) && $avalara = commerce_avalara_object()) {
    $company_code = commerce_avalara_company_code();
    if (!empty($company_code)) {
      $avalara->transactionsCommit($company_code, $order->data['commerce_avalara']['transaction_code']);
    }
  }
}

/**
 * VOID AvaTax transaction for $order.
 */
function commerce_avalara_void_transaction($order) {
  if (isset($order->data['commerce_avalara']['transaction_code']) && $avalara = commerce_avalara_object()) {
    $company_code = commerce_avalara_company_code();
    if (!empty($company_code)) {
      $parameters = array(
        'code' => 'Cancelling the order',
      );
      $avalara->transactionsVoid($company_code, $order->data['commerce_avalara']['transaction_code'], $parameters);
    }
  }
}
